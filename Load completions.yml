# Load completions
source <(kubectl completion bash)

Create a Pod manifest for a Pod that will consume a lot of CPU resources:
cat << 'EOF' > load.yaml
apiVersion: v1
kind: Pod
metadata:
  name: load
spec:
  containers:
  - name: cpu-load
    image: cloudacademydevops/stress
    args:
    - -cpus
    - "2"
EOF

kubectl apply -f load.yaml

kubectl top --help
kubectl top pods
kubectl top nodes

cat << 'EOF' > load-limited.yaml
apiVersion: v1
kind: Pod
metadata:
  name: load-limited
spec:
  containers:
  - name: cpu-load-limited
    image: cloudacademydevops/stress
    args:
    - -cpus
    - "2"
    resources:
      limits:
        cpu: "0.5" # half a core
        memory: "20Mi" # 20 mebibytes 
      requests:
        cpu: "0.35" # 35% of a core
        memory: "10Mi" # 20 mebibytes
EOF

Describe the nodes and output their non-terminated Pods tables to highlight how scheduling decisions are made based on the current workload:
kubectl describe nodes | grep --after-context=5 "Non-terminated Pods"

kubectl apply -f load-limited.yaml
kubectl get pods -o wide

New CPU
cat << 'EOF' > load.yaml
apiVersion: v1
kind: Pod
metadata:
  name: load
spec:
  containers:
  - name: cpu-load
    image: cloudacademydevops/stress
    args:
    - -cpus
    - "2"
    resources:
      requests:
        cpu: "1.7"
EOF